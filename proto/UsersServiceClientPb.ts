/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: proto/users.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_users_pb from '../proto/users_pb';


export class UsersServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/Delete',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.userDeleteRequest,
    proto_users_pb.UserResponse,
    (request: proto_users_pb.userDeleteRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.UserResponse.deserializeBinary
  );

  delete(
    request: proto_users_pb.userDeleteRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.UserResponse>;

  delete(
    request: proto_users_pb.userDeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.UserResponse>;

  delete(
    request: proto_users_pb.userDeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorGet = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/Get',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.UserGetRequest,
    proto_users_pb.UserGetResponse,
    (request: proto_users_pb.UserGetRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.UserGetResponse.deserializeBinary
  );

  get(
    request: proto_users_pb.UserGetRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.UserGetResponse>;

  get(
    request: proto_users_pb.UserGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserGetResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.UserGetResponse>;

  get(
    request: proto_users_pb.UserGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserGetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/Get',
        request,
        metadata || {},
        this.methodDescriptorGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/Get',
    request,
    metadata || {},
    this.methodDescriptorGet);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/Update',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.UserUpdateRequest,
    proto_users_pb.UserResponse,
    (request: proto_users_pb.UserUpdateRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.UserResponse.deserializeBinary
  );

  update(
    request: proto_users_pb.UserUpdateRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.UserResponse>;

  update(
    request: proto_users_pb.UserUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.UserResponse>;

  update(
    request: proto_users_pb.UserUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/Create',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.UserRequest,
    proto_users_pb.UserResponse,
    (request: proto_users_pb.UserRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.UserResponse.deserializeBinary
  );

  create(
    request: proto_users_pb.UserRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.UserResponse>;

  create(
    request: proto_users_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.UserResponse>;

  create(
    request: proto_users_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorUserProfile = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/UserProfile',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.userProfileRequest,
    proto_users_pb.userProfileResponse,
    (request: proto_users_pb.userProfileRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.userProfileResponse.deserializeBinary
  );

  userProfile(
    request: proto_users_pb.userProfileRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.userProfileResponse>;

  userProfile(
    request: proto_users_pb.userProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.userProfileResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.userProfileResponse>;

  userProfile(
    request: proto_users_pb.userProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.userProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/UserProfile',
        request,
        metadata || {},
        this.methodDescriptorUserProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/UserProfile',
    request,
    metadata || {},
    this.methodDescriptorUserProfile);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/proto.UsersService/Login',
    grpcWeb.MethodType.UNARY,
    proto_users_pb.userLoginRequest,
    proto_users_pb.userLoginResponse,
    (request: proto_users_pb.userLoginRequest) => {
      return request.serializeBinary();
    },
    proto_users_pb.userLoginResponse.deserializeBinary
  );

  login(
    request: proto_users_pb.userLoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_users_pb.userLoginResponse>;

  login(
    request: proto_users_pb.userLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_users_pb.userLoginResponse) => void): grpcWeb.ClientReadableStream<proto_users_pb.userLoginResponse>;

  login(
    request: proto_users_pb.userLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_users_pb.userLoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.UsersService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.UsersService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

}


/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: proto/users.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.proto.UsersServiceClient');
goog.provide('proto.proto.UsersServicePromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.proto.UserGetRequest');
goog.require('proto.proto.UserGetResponse');
goog.require('proto.proto.UserRequest');
goog.require('proto.proto.UserResponse');
goog.require('proto.proto.UserUpdateRequest');
goog.require('proto.proto.userDeleteRequest');
goog.require('proto.proto.userLoginRequest');
goog.require('proto.proto.userLoginResponse');
goog.require('proto.proto.userProfileRequest');
goog.require('proto.proto.userProfileResponse');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.UsersServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.UsersServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.userDeleteRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UsersService_Delete = new grpc.web.MethodDescriptor(
  '/proto.UsersService/Delete',
  grpc.web.MethodType.UNARY,
  proto.proto.userDeleteRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.userDeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.userDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/Delete',
      request,
      metadata || {},
      methodDescriptor_UsersService_Delete,
      callback);
};


/**
 * @param {!proto.proto.userDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/Delete',
      request,
      metadata || {},
      methodDescriptor_UsersService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UserGetRequest,
 *   !proto.proto.UserGetResponse>}
 */
const methodDescriptor_UsersService_Get = new grpc.web.MethodDescriptor(
  '/proto.UsersService/Get',
  grpc.web.MethodType.UNARY,
  proto.proto.UserGetRequest,
  proto.proto.UserGetResponse,
  /**
   * @param {!proto.proto.UserGetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserGetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.UserGetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserGetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserGetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/Get',
      request,
      metadata || {},
      methodDescriptor_UsersService_Get,
      callback);
};


/**
 * @param {!proto.proto.UserGetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserGetResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/Get',
      request,
      metadata || {},
      methodDescriptor_UsersService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UserUpdateRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UsersService_Update = new grpc.web.MethodDescriptor(
  '/proto.UsersService/Update',
  grpc.web.MethodType.UNARY,
  proto.proto.UserUpdateRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.UserUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.UserUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/Update',
      request,
      metadata || {},
      methodDescriptor_UsersService_Update,
      callback);
};


/**
 * @param {!proto.proto.UserUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/Update',
      request,
      metadata || {},
      methodDescriptor_UsersService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UserRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UsersService_Create = new grpc.web.MethodDescriptor(
  '/proto.UsersService/Create',
  grpc.web.MethodType.UNARY,
  proto.proto.UserRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/Create',
      request,
      metadata || {},
      methodDescriptor_UsersService_Create,
      callback);
};


/**
 * @param {!proto.proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/Create',
      request,
      metadata || {},
      methodDescriptor_UsersService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.userProfileRequest,
 *   !proto.proto.userProfileResponse>}
 */
const methodDescriptor_UsersService_UserProfile = new grpc.web.MethodDescriptor(
  '/proto.UsersService/UserProfile',
  grpc.web.MethodType.UNARY,
  proto.proto.userProfileRequest,
  proto.proto.userProfileResponse,
  /**
   * @param {!proto.proto.userProfileRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.userProfileResponse.deserializeBinary
);


/**
 * @param {!proto.proto.userProfileRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.userProfileResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.userProfileResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.userProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/UserProfile',
      request,
      metadata || {},
      methodDescriptor_UsersService_UserProfile,
      callback);
};


/**
 * @param {!proto.proto.userProfileRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.userProfileResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.userProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/UserProfile',
      request,
      metadata || {},
      methodDescriptor_UsersService_UserProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.userLoginRequest,
 *   !proto.proto.userLoginResponse>}
 */
const methodDescriptor_UsersService_Login = new grpc.web.MethodDescriptor(
  '/proto.UsersService/Login',
  grpc.web.MethodType.UNARY,
  proto.proto.userLoginRequest,
  proto.proto.userLoginResponse,
  /**
   * @param {!proto.proto.userLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.userLoginResponse.deserializeBinary
);


/**
 * @param {!proto.proto.userLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.userLoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.userLoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UsersServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UsersService/Login',
      request,
      metadata || {},
      methodDescriptor_UsersService_Login,
      callback);
};


/**
 * @param {!proto.proto.userLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.userLoginResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UsersServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UsersService/Login',
      request,
      metadata || {},
      methodDescriptor_UsersService_Login);
};


}); // goog.scope


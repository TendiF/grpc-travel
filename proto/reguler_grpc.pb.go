// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/reguler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegulersService_Create_FullMethodName = "/proto.RegulersService/Create"
	RegulersService_Get_FullMethodName    = "/proto.RegulersService/Get"
	RegulersService_Update_FullMethodName = "/proto.RegulersService/Update"
)

// RegulersServiceClient is the client API for RegulersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegulersServiceClient interface {
	Create(ctx context.Context, in *RegulerCreateRequest, opts ...grpc.CallOption) (*RegulerResponse, error)
	Get(ctx context.Context, in *RegulerGetRequest, opts ...grpc.CallOption) (*RegulerGetResponse, error)
	Update(ctx context.Context, in *RegulerUpdateRequest, opts ...grpc.CallOption) (*RegulerResponse, error)
}

type regulersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegulersServiceClient(cc grpc.ClientConnInterface) RegulersServiceClient {
	return &regulersServiceClient{cc}
}

func (c *regulersServiceClient) Create(ctx context.Context, in *RegulerCreateRequest, opts ...grpc.CallOption) (*RegulerResponse, error) {
	out := new(RegulerResponse)
	err := c.cc.Invoke(ctx, RegulersService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regulersServiceClient) Get(ctx context.Context, in *RegulerGetRequest, opts ...grpc.CallOption) (*RegulerGetResponse, error) {
	out := new(RegulerGetResponse)
	err := c.cc.Invoke(ctx, RegulersService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regulersServiceClient) Update(ctx context.Context, in *RegulerUpdateRequest, opts ...grpc.CallOption) (*RegulerResponse, error) {
	out := new(RegulerResponse)
	err := c.cc.Invoke(ctx, RegulersService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegulersServiceServer is the server API for RegulersService service.
// All implementations should embed UnimplementedRegulersServiceServer
// for forward compatibility
type RegulersServiceServer interface {
	Create(context.Context, *RegulerCreateRequest) (*RegulerResponse, error)
	Get(context.Context, *RegulerGetRequest) (*RegulerGetResponse, error)
	Update(context.Context, *RegulerUpdateRequest) (*RegulerResponse, error)
}

// UnimplementedRegulersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegulersServiceServer struct {
}

func (UnimplementedRegulersServiceServer) Create(context.Context, *RegulerCreateRequest) (*RegulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRegulersServiceServer) Get(context.Context, *RegulerGetRequest) (*RegulerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegulersServiceServer) Update(context.Context, *RegulerUpdateRequest) (*RegulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeRegulersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegulersServiceServer will
// result in compilation errors.
type UnsafeRegulersServiceServer interface {
	mustEmbedUnimplementedRegulersServiceServer()
}

func RegisterRegulersServiceServer(s grpc.ServiceRegistrar, srv RegulersServiceServer) {
	s.RegisterService(&RegulersService_ServiceDesc, srv)
}

func _RegulersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegulerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegulersService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulersServiceServer).Create(ctx, req.(*RegulerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegulersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegulerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegulersService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulersServiceServer).Get(ctx, req.(*RegulerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegulersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegulerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegulersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegulersService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegulersServiceServer).Update(ctx, req.(*RegulerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegulersService_ServiceDesc is the grpc.ServiceDesc for RegulersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegulersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RegulersService",
	HandlerType: (*RegulersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RegulersService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RegulersService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegulersService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reguler.proto",
}
